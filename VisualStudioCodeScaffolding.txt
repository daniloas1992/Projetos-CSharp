# https://docs.microsoft.com/en-us/aspnet/core/fundamentals/tools/dotnet-aspnet-codegenerator?view=aspnetcore-5.0
# https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/adding-model?view=aspnetcore-5.0&tabs=visual-studio-code

# Install:
dotnet tool install -g dotnet-aspnet-codegenerator
dotnet tool update -g dotnet-aspnet-codegenerator

dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.SqlServer




# Create Views:
dotnet-aspnet-codegenerator razorpage -m Department -dc SalesWebMvcContext -udl -outDir Views/Departments --referenceScriptLibraries

#-m:	                     The name of the model.
#-dc:	                     The DbContext class to use.
#-udl:	                     Use the default layout.
#-outDir:	             The relative output folder path to create the views.
#--referenceScriptLibraries:  Adds _ValidationScriptsPartial to Edit and Create pages

#Create Controller:
dotnet aspnet-codegenerator controller -name DepartmentsController --relativeFolderPath Controllers --useDefaultLayout --referenceScriptLibraries --readWriteActions








#To scaffolder a view, the command is like below:
#dotnet aspnet-codegenerator view Index List -m Book -outDir Views\Books --useDefaultLayout --referenceScriptLibraries


#Font (Url ends in '%20components.'): 
https://mycsharpdeveloper.wordpress.com/2020/04/22/how-to-scaffolding-asp-net-core-mvc-view-and-controller-in-visual-studio-code#:~:text=The%20VS%20Code%20is%20not,command%20provides%20by%20DotNet%20Core.&text=Besides%20that%2C%20you%20need%20to,depends%20on%20your%20project%20components.
